//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Neuron.OSC.Ws.LysisService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LysisService.IDataTransfer")]
    public interface IDataTransfer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataTransfer/DoWork", ReplyAction="http://tempuri.org/IDataTransfer/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataTransfer/DoWork", ReplyAction="http://tempuri.org/IDataTransfer/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataTransfer/HL7DataRaw", ReplyAction="http://tempuri.org/IDataTransfer/HL7DataRawResponse")]
        string HL7DataRaw(string rawXml);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataTransfer/HL7DataRaw", ReplyAction="http://tempuri.org/IDataTransfer/HL7DataRawResponse")]
        System.IAsyncResult BeginHL7DataRaw(string rawXml, System.AsyncCallback callback, object asyncState);
        
        string EndHL7DataRaw(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataTransferChannel : Neuron.OSC.Ws.LysisService.IDataTransfer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HL7DataRawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HL7DataRawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataTransferClient : System.ServiceModel.ClientBase<Neuron.OSC.Ws.LysisService.IDataTransfer>, Neuron.OSC.Ws.LysisService.IDataTransfer {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginHL7DataRawDelegate;
        
        private EndOperationDelegate onEndHL7DataRawDelegate;
        
        private System.Threading.SendOrPostCallback onHL7DataRawCompletedDelegate;
        
        public DataTransferClient() {
        }
        
        public DataTransferClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataTransferClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataTransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataTransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<HL7DataRawCompletedEventArgs> HL7DataRawCompleted;
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            this.EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        public string HL7DataRaw(string rawXml) {
            return base.Channel.HL7DataRaw(rawXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHL7DataRaw(string rawXml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHL7DataRaw(rawXml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndHL7DataRaw(System.IAsyncResult result) {
            return base.Channel.EndHL7DataRaw(result);
        }
        
        private System.IAsyncResult OnBeginHL7DataRaw(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rawXml = ((string)(inValues[0]));
            return this.BeginHL7DataRaw(rawXml, callback, asyncState);
        }
        
        private object[] OnEndHL7DataRaw(System.IAsyncResult result) {
            string retVal = this.EndHL7DataRaw(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHL7DataRawCompleted(object state) {
            if ((this.HL7DataRawCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HL7DataRawCompleted(this, new HL7DataRawCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HL7DataRawAsync(string rawXml) {
            this.HL7DataRawAsync(rawXml, null);
        }
        
        public void HL7DataRawAsync(string rawXml, object userState) {
            if ((this.onBeginHL7DataRawDelegate == null)) {
                this.onBeginHL7DataRawDelegate = new BeginOperationDelegate(this.OnBeginHL7DataRaw);
            }
            if ((this.onEndHL7DataRawDelegate == null)) {
                this.onEndHL7DataRawDelegate = new EndOperationDelegate(this.OnEndHL7DataRaw);
            }
            if ((this.onHL7DataRawCompletedDelegate == null)) {
                this.onHL7DataRawCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHL7DataRawCompleted);
            }
            base.InvokeAsync(this.onBeginHL7DataRawDelegate, new object[] {
                        rawXml}, this.onEndHL7DataRawDelegate, this.onHL7DataRawCompletedDelegate, userState);
        }
    }
}
